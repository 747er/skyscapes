<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
{{ 'calendar.css' | asset_url | stylesheet_tag }}

<div class="shopify-section spaced-section" id="calendar-section">
  <div id="experiences" class="page-width">
    <div class="workshop-flex">
      {%- for product in collection.products -%}
        {% capture coming_start %}{{product.metafields.tour_info.start_date}}{% endcapture %}
        {% capture coming_end %}{{product.metafields.tour_info.end_date}}{% endcapture %}
        {%- if product.metafields.tour_info.guides.value != blank -%}
          {% assign guide_list = product.metafields.tour_info.guides.value | split: ',' %}
        {%- endif -%}
        {% assign today_date = 'now' | date: '%s' %}
        {% assign pre_start = coming_start | date: '%s' %}
        {% assign pre_end = coming_end | date: '%s' %}
        <div class="col-sm-12 col-md-8 cal-card">
          <div class="cal-card-pictureContainer">
            <img
              src="{{ product.featured_image.src | img_url: '600x' }}"
              alt="{{ product.title }}"
              class="cal-card-picture"
              style="z-index: -1;">
          </div>
          <div id="tour-{{ forloop.index | plus: 1 }}" class="cal-card-pictureContainer">
            <a href="{{ product.url }}" class="image-overlay-link"></a>
          </div>
          <div class="cal-description">
            <a href="{{ product.url }}">
              <div class="cal-card-title">{{ product.title }}{% unless product.available %}
                  <span style="color: white;">(FULL!)</span>
                {% endunless %}
              </div>
            </a>

            <div class="cal-kv-wrap">
              <div class="cal-key">
                Dates:
              </div>
              <div class="cal-value">
                {{ pre_start | date: "%b %d" }} - {{ pre_end | date: "%b %d %Y" }}
              </div>
            </div>
            <div class="cal-kv-wrap">
              <div class="cal-key">
                Price:
              </div>
              <div class="cal-value">
                {{ product.price | money }}
              </div>
            </div>

            <div class="cal-key">
              Guides:
            </div>
            {%- if guide_list != blank -%}
              <div class="guides-wrap">
                {%- for guide in guide_list -%}
                  {%- capture guide_pic -%}{{guide | downcase }}.jpg{%- endcapture -%}
                  <div class="guide-image-wrap">
                    <img
                      src="{{ guide_pic | asset_url }}"
                      alt="{{ guide }} headshot"
                      class="guide-image">
                    <div>{{ guide }}</div>
                  </div>
                {%- endfor -%}
              </div>
            {%- else -%}
              <div>Guides TBA</div>
            {%- endif -%}


            <a href="{{ product.url }}" class="button button--primary calendar-button">
              More Info
            </a>

          </div>
        </div>
      {%- endfor -%}
    </div>
  </div>
</div>

{% schema %}
  {
    "name": "Collection Calendar",
    "tag": "section",
    "class": "spaced-section spaced-section--full-width",
    "settings": [
      {
        "type": "image_picker",
        "id": "image",
        "label": "t:sections.image-banner.settings.image.label"
      }, {
        "type": "image_picker",
        "id": "image_map",
        "label": "t:sections.image-banner.settings.image_map.label"
      }
    ],
    "presets": [
      {
        "name": "Collection Calendar"
      }
    ]
  }
{% endschema %}


<script>

  const [sizeW, sizeH, segW, segH] = [30, 20, 50, 50]; // Plane dimensions and segments

  const initFlagEffect = (container, imageUrl, width, height) => {
    // Create isolated scene, camera, and renderer for each canvas
    const scene = new THREE.Scene();
    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(width, height);
    renderer.setClearColor(0x000000, 0); // Transparent background
    container.appendChild(renderer.domElement);

    const camera = new THREE.PerspectiveCamera(60, width / height, 1, 1000);
    camera.position.set(0, 0, 20); // Ensure camera is far enough
    camera.lookAt(0, 0, 0);

    // Create the flag geometry and load texture
    const geometry = new THREE.PlaneGeometry(sizeW, sizeH, segW, segH);
    const loader = new THREE.TextureLoader();

    loader.load(
      imageUrl,
      (texture) => {
        texture.minFilter = THREE.LinearFilter;
        texture.magFilter = THREE.LinearFilter;

        const material = new THREE.MeshBasicMaterial({ map: texture });
        const flag = new THREE.Mesh(geometry, material);
        scene.add(flag);

        console.log("Flag Added to Scene:", flag);

        animateFlag(renderer, scene, camera, flag, container);
      },
      undefined, // onProgress
      (error) => {
        console.error("Error Loading Texture:", error);
      }
    );
  };

  const animateFlag = (renderer, scene, camera, flag, container) => {
    let h = 0.5; // Horizontal wave frequency
    let v = 0.0; // Vertical wave frequency
    let swing = 0.2; // Amplitude of the wave
    let speed = 0.2; // Speed of the wave

    // Add hover effect to increase swing and speed
    container.addEventListener("mouseenter", () => {
      swing += 0.4;   // Increase amplitude
      speed += 0.5;   // Increase speed
    });

    container.addEventListener("mouseleave", () => {
      swing = 0.2;    // Reset amplitude
      speed = 0.2;    // Reset speed
    });

    const positionAttribute = flag.geometry.attributes.position;
    const vertexCount = positionAttribute.count;

    const updateFlagVertices = () => {
      const time = Date.now() * speed / 100;

      for (let i = 0; i < vertexCount; i++) {
        const x = positionAttribute.getX(i);
        const y = positionAttribute.getY(i);

        const wave = Math.sin(h * x + v * y - time) * swing;
        positionAttribute.setZ(i, wave);
      }

      positionAttribute.needsUpdate = true;
    };

    const render = () => {
      updateFlagVertices();
      renderer.render(scene, camera);
      requestAnimationFrame(render);
    };

    render();
  };

  // Apply effect to all images
  document.addEventListener("DOMContentLoaded", () => {
    const images = document.querySelectorAll(".cal-card-pictureContainer img");

    images.forEach((img) => {
      // Ensure image is fully loaded before replacing it
      const imageUrl = img.src;
      img.onload = () => {
        const container = img.parentElement;
        const width = img.offsetWidth || 600; // Fallback width
        const height = img.offsetHeight || 400; // Fallback height

        img.style.display = "none"; // Hide the original image
        const canvasContainer = document.createElement("div");
        canvasContainer.style.width = `${width}px`;
        canvasContainer.style.height = `${height}px`;
        canvasContainer.style.position = "relative";
        container.appendChild(canvasContainer);

        initFlagEffect(canvasContainer, imageUrl, width, height);
      };

      // If the image is already loaded
      if (img.complete && img.naturalWidth > 0) {
        img.onload();
      }
    });
  });

</script>
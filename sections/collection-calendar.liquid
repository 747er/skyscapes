<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
{{ 'calendar.css' | asset_url | stylesheet_tag }}

<div class="shopify-section spaced-section" id="calendar-section">
  <div id="experiences" class="page-width">
    <div class="workshop-flex">
      {%- for product in collection.products -%}
        {% capture coming_start %}{{product.metafields.tour_info.start_date}}{% endcapture %}
        {% capture coming_end %}{{product.metafields.tour_info.end_date}}{% endcapture %}
        {%- if product.metafields.tour_info.guides.value != blank -%}
          {% assign guide_list = product.metafields.tour_info.guides.value | split: ',' %}
        {%- endif -%}
        {% assign today_date = 'now' | date: '%s' %}
        {% assign pre_start = coming_start | date: '%s' %}
        {% assign pre_end = coming_end | date: '%s' %}
        <div class="col-sm-12 col-md-8 cal-card">
          <div class="cal-card-pictureContainer">
            <img
              src="{{ product.featured_image.src | img_url: '600x' }}"
              alt="{{ product.title }}"
              class="cal-card-picture"
              style="z-index: -1;">
          </div>
          <div id="tour-{{ forloop.index | plus: 1 }}" class="cal-card-pictureContainer">
            <a href="{{ product.url }}" class="image-overlay-link"></a>
          </div>
          <div class="cal-description">
            <a href="{{ product.url }}">
              <div class="cal-card-title">{{ product.title }}{% unless product.available %}
                  <span style="color: white;">(FULL!)</span>
                {% endunless %}
              </div>
            </a>

            <div class="cal-kv-wrap">
              <div class="cal-key">
                Dates:
              </div>
              <div class="cal-value">
                {{ pre_start | date: "%b %d" }} - {{ pre_end | date: "%b %d %Y" }}
              </div>
            </div>
            <div class="cal-kv-wrap">
              <div class="cal-key">
                Price:
              </div>
              <div class="cal-value">
                {{ product.price | money }}
              </div>
            </div>

            <div class="cal-key">
              Guides:
            </div>
            {%- if guide_list != blank -%}
              <div class="guides-wrap">
                {%- for guide in guide_list -%}
                  {%- capture guide_pic -%}{{guide | downcase }}.jpg{%- endcapture -%}
                  <div class="guide-image-wrap">
                    <img
                      src="{{ guide_pic | asset_url }}"
                      alt="{{ guide }} headshot"
                      class="guide-image">
                    <div>{{ guide }}</div>
                  </div>
                {%- endfor -%}
              </div>
            {%- else -%}
              <div>Guides TBA</div>
            {%- endif -%}


            <a href="{{ product.url }}" class="button button--primary calendar-button">
              More Info
            </a>

          </div>
        </div>
      {%- endfor -%}
    </div>
  </div>
</div>

{% schema %}
  {
    "name": "Collection Calendar",
    "tag": "section",
    "class": "spaced-section spaced-section--full-width",
    "settings": [
      {
        "type": "image_picker",
        "id": "image",
        "label": "t:sections.image-banner.settings.image.label"
      }, {
        "type": "image_picker",
        "id": "image_map",
        "label": "t:sections.image-banner.settings.image_map.label"
      }
    ],
    "presets": [
      {
        "name": "Collection Calendar"
      }
    ]
  }
{% endschema %}


<script>
  document.addEventListener("DOMContentLoaded", () => {
  const images = document.querySelectorAll(".cal-card-pictureContainer img");

  images.forEach((img) => {
    // Replace the image with a Three.js canvas
    const container = img.parentElement;
    const width = img.offsetWidth;
    const height = img.offsetHeight;

    // Hide the original image
    // img.style.display = "none";

    // Create the Three.js scene
    const scene = new THREE.Scene();
    const camera = new THREE.OrthographicCamera(
      width / -2,
      width / 2,
      height / 2,
      height / -2,
      0.1,
      10
    );
    camera.position.z = 1;

    const renderer = new THREE.WebGLRenderer({ alpha: true });
    renderer.setSize(width, height);
    container.appendChild(renderer.domElement);

    // Load the image as a texture
    const loader = new THREE.TextureLoader();
    const texture = loader.load(img.src);

    // Create the plane geometry with a subtle vertex shader
    const geometry = new THREE.PlaneGeometry(width, height, 20, 20);

    const material = new THREE.ShaderMaterial({
      uniforms: {
        uTime: { value: 0 },
        uTexture: { value: texture },
      },
      vertexShader: `
        uniform float uTime;
        varying vec2 vUv;

        void main() {
          vUv = uv;
          vec3 pos = position;
          pos.y += sin(pos.x * 0.1 + uTime * 2.0) * 2.0; // Subtle wave distortion
          gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);
        }
      `,
      fragmentShader: `
        uniform sampler2D uTexture;
        varying vec2 vUv;

        void main() {
          gl_FragColor = texture2D(uTexture, vUv);
        }
      `,
      transparent: true,
    });

    const plane = new THREE.Mesh(geometry, material);
    scene.add(plane);

    // Animation loop
    const clock = new THREE.Clock();

    function animate() {
      material.uniforms.uTime.value = clock.getElapsedTime();
      renderer.render(scene, camera);
      requestAnimationFrame(animate);
    }
    animate();
  });
  });
</script>